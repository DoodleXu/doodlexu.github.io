<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Django on Lao&#39;s Blog</title>
    <link>https://laoooo.cn/tags/django/</link>
    <description>Recent content in Django on Lao&#39;s Blog</description>
    <image>
      <url>https://laoooo.cn/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://laoooo.cn/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 17 Nov 2021 10:00:56 +0000</lastBuildDate><atom:link href="https://laoooo.cn/tags/django/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Django学习笔记（四）</title>
      <link>https://laoooo.cn/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</link>
      <pubDate>Wed, 17 Nov 2021 10:00:56 +0000</pubDate>
      
      <guid>https://laoooo.cn/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</guid>
      <description>Django 数据模型 Django 对各种数据库提供了很好的支持，包括：PostgreSQL、MySQL、SQLite、Oracle。 Django 为这些数据库提供了统一的调用</description>
      <content:encoded><![CDATA[<h1 id="django-数据模型">Django 数据模型</h1>
<blockquote>
<p>Django 对各种数据库提供了很好的支持，包括：PostgreSQL、MySQL、SQLite、Oracle。
Django 为这些数据库提供了统一的调用API。 我们可以根据自己业务需求选择不同的数据库。
MySQL 是 Web 应用中最常用的数据库。本文以MySQL为例，用Django来链接MySQL数据库。</p>
</blockquote>
<h2 id="驱动">驱动</h2>
<p>python默认不支持对MySQL进行直接操作，我们需要安装一个驱动以获得对MySQL的支持。如果你没有，你可以通过以下命令安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo pip3 install pymysql
</span></span></code></pre></div><h2 id="配置数据库">配置数据库</h2>
<p>Django可以对表进行管理，但还不能进行库级别的操作，所以我们需要手动建库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">create database 数据库名称 default <span class="nv">charset</span><span class="o">=</span>utf8<span class="p">;</span> <span class="c1"># 防止编码问题，指定为 utf8</span>
</span></span></code></pre></div><p>数据库有了，我们需要在Django配置（项目根目录/同名文件夹/settings.py）里写入相关信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;default&#39;</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">    <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;ENGINE&#39;</span><span class="p">:</span> <span class="s1">&#39;django.db.backends.mysql&#39;</span><span class="p">,</span>    <span class="c1"># 数据库引擎</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;NAME&#39;</span><span class="p">:</span> <span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="c1"># 数据库名称</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;HOST&#39;</span><span class="p">:</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="c1"># 数据库地址，本机 ip 地址 127.0.0.1 </span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;PORT&#39;</span><span class="p">:</span> <span class="mi">3306</span><span class="p">,</span> <span class="c1"># 端口 </span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;USER&#39;</span><span class="p">:</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span>  <span class="c1"># 数据库用户名</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;PASSWORD&#39;</span><span class="p">:</span> <span class="s1">&#39;123456&#39;</span><span class="p">,</span> <span class="c1"># 数据库密码</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><em>注意：如果你使用了 Python2.x 版本这里添加了中文注释，所以你需要在 settings.py 文件头部添加 <strong><code># -*- coding: UTF-8 -*-</code></strong> 。</em></p>
<h2 id="定义模型">定义模型</h2>
<h3 id="创建app">创建APP</h3>
<p>Django 规定，如果要使用模型，必须要创建一个 app。我们使用以下命令创建一个 TestModel 的 app:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">django-admin startapp TestModel
</span></span></code></pre></div><p>目录结构如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Web
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- Web
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- manage.py
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- TestModel
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="p">|</span>-- __init__.py
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="p">|</span>-- admin.py
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="p">|</span>-- models.py
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="p">|</span>-- tests.py
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="sb">`</span>-- views.py
</span></span></code></pre></div><p>修改 TestModel/models.py 文件，代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># models.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Test</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span></span></code></pre></div><p>以上的类名代表了数据库<strong>表名</strong>，且继承了models.Model，类里面的字段代表数据表中的 <strong>字段(name)</strong> ，数据类型则由CharField（相当于varchar）、DateField（相当于datetime）， max_length 参数限定长度。
接下来在 settings.py 中找到INSTALLED_APPS这一项，如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;django.contrib.admin&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;django.contrib.auth&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;django.contrib.contenttypes&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;django.contrib.sessions&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;django.contrib.messages&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;django.contrib.staticfiles&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;TestModel&#39;</span><span class="p">,</span>               <span class="c1"># 添加此项</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>在命令行中运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 manage.py migrate   <span class="c1"># 创建表结构</span>
</span></span><span class="line"><span class="cl">python3 manage.py makemigrations TestModel  <span class="c1"># 让 Django 知道我们在我们的模型有一些变更</span>
</span></span><span class="line"><span class="cl">python3 manage.py migrate TestModel   <span class="c1"># 创建表结构</span>
</span></span></code></pre></div><p>如果看到&quot;Creating table…&quot; 的字样，说明你的数据表就创建好了。
表名组成结构为：应用名_类名（如：TestModel_test）。
**注意：**尽管我们没有在 models 给表设置主键，但是 Django 会自动添加一个 id 作为主键。</p>
<h2 id="数据库操作">数据库操作</h2>
<p>我们可以写一个testdb.py来测试，并修改urls.py：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span><span class="p">,</span><span class="n">testdb</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span><span class="p">(</span><span class="s1">&#39;index/&#39;</span><span class="p">,</span> <span class="n">index</span><span class="o">.</span><span class="n">index</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span><span class="p">(</span><span class="s1">&#39;testdb/&#39;</span><span class="p">,</span> <span class="n">testdb</span><span class="o">.</span><span class="n">testdb</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><h3 id="添加数据">添加数据</h3>
<p>添加数据需要先创建对象，然后再执行 save 函数，相当于SQL中的INSERT：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span> 
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">TestModel.models</span> <span class="kn">import</span> <span class="n">Test</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 数据库操作</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">testdb</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">Test</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;runoob&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s2">&#34;&lt;p&gt;数据添加成功！&lt;/p&gt;&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>如果访问 <strong>http://127.0.0.1:8000/testdb</strong> 就可以看到数据添加成功的提示。</p>
<h3 id="获取数据">获取数据</h3>
<p>Django提供了多种方式来获取数据库的内容，这里就不细讲了，如下面代码所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">TestModel.models</span> <span class="kn">import</span> <span class="n">Test</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 数据库操作</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">testdb</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 初始化</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">response1</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 通过objects这个模型管理器的all()获得所有数据行，相当于SQL中的SELECT * FROM</span>
</span></span><span class="line"><span class="cl">    <span class="nb">list</span> <span class="o">=</span> <span class="n">Test</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="c1"># filter相当于SQL中的WHERE，可设置条件过滤结果</span>
</span></span><span class="line"><span class="cl">    <span class="n">response2</span> <span class="o">=</span> <span class="n">Test</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 获取单个对象</span>
</span></span><span class="line"><span class="cl">    <span class="n">response3</span> <span class="o">=</span> <span class="n">Test</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 限制返回的数据 相当于 SQL 中的 OFFSET 0 LIMIT 2;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Test</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">#数据排序</span>
</span></span><span class="line"><span class="cl">    <span class="n">Test</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 上面的方法可以连锁使用</span>
</span></span><span class="line"><span class="cl">    <span class="n">Test</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;admin&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 输出所有数据</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">response1</span> <span class="o">+=</span> <span class="n">var</span><span class="o">.</span><span class="n">name</span> <span class="o">+</span> <span class="s2">&#34; &#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">response1</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s2">&#34;&lt;p&gt;&#34;</span> <span class="o">+</span> <span class="n">response</span> <span class="o">+</span> <span class="s2">&#34;&lt;/p&gt;&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="更新数据">更新数据</h3>
<p>修改数据可以使用 save() 或 update():</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">TestModel.models</span> <span class="kn">import</span> <span class="n">Test</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 数据库操作</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">testdb</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 修改其中一个id=1的name字段，再save，相当于SQL中的UPDATE</span>
</span></span><span class="line"><span class="cl">    <span class="n">test1</span> <span class="o">=</span> <span class="n">Test</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">test1</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Google&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">test1</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 另外一种方式</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#Test.objects.filter(id=1).update(name=&#39;Google&#39;)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 修改所有的列</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Test.objects.all().update(name=&#39;Google&#39;)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s2">&#34;&lt;p&gt;修改成功&lt;/p&gt;&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="删除数据">删除数据</h3>
<p>删除数据库中的对象只需调用该对象的delete()方法即可：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">TestModel.models</span> <span class="kn">import</span> <span class="n">Test</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 数据库操作</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">testdb</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 删除id=1的数据</span>
</span></span><span class="line"><span class="cl">    <span class="n">test1</span> <span class="o">=</span> <span class="n">Test</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">test1</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 另外一种方式</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Test.objects.filter(id=1).delete()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 删除所有数据</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Test.objects.all().delete()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s2">&#34;&lt;p&gt;删除成功&lt;/p&gt;&#34;</span><span class="p">)</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Django学习笔记（三）</title>
      <link>https://laoooo.cn/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</link>
      <pubDate>Mon, 15 Nov 2021 10:59:10 +0000</pubDate>
      
      <guid>https://laoooo.cn/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</guid>
      <description>Django学习笔记（三） 模板 利用Django的模板，我们可以实现文档和表现形式的分离，实现MVC架构。 结构 在项目根目录底下创建 templates 目录并建立</description>
      <content:encoded><![CDATA[<h1 id="django学习笔记三">Django学习笔记（三）</h1>
<h2 id="模板">模板</h2>
<blockquote>
<p>利用Django的模板，我们可以实现文档和表现形式的分离，实现MVC架构。</p>
</blockquote>
<h2 id="结构">结构</h2>
<p>在项目根目录底下创建 <code>templates </code>目录并建立<code>index.html</code>文件，整个目录结构应如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">doodlexu@MacBook Web % tree
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── Web
</span></span><span class="line"><span class="cl">│   ├── __init__.py
</span></span><span class="line"><span class="cl">│   ├── __pycache__
</span></span><span class="line"><span class="cl">│   │   ├── __init__.cpython-39.pyc
</span></span><span class="line"><span class="cl">│   │   ├── index.cpython-39.pyc
</span></span><span class="line"><span class="cl">│   │   ├── settings.cpython-39.pyc
</span></span><span class="line"><span class="cl">│   │   ├── urls.cpython-39.pyc
</span></span><span class="line"><span class="cl">│   │   └── wsgi.cpython-39.pyc
</span></span><span class="line"><span class="cl">│   ├── asgi.py
</span></span><span class="line"><span class="cl">│   ├── index.py
</span></span><span class="line"><span class="cl">│   ├── settings.py
</span></span><span class="line"><span class="cl">│   ├── urls.py
</span></span><span class="line"><span class="cl">│   └── wsgi.py
</span></span><span class="line"><span class="cl">├── db.sqlite3
</span></span><span class="line"><span class="cl">├── manage.py
</span></span><span class="line"><span class="cl">└── templates
</span></span><span class="line"><span class="cl">    └── index.html
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">3</span> directories, <span class="m">14</span> files
</span></span></code></pre></div><p>向<code>index.html</code>文件写入以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>{{ hello }}<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>需要注意的是，模板文件里，变量的使用是双括号<code>{{ content }}</code></p>
<p>接下来我们需要向Django说明模板文件的路径，修改Web/settings.py，修改 TEMPLATES 中的 DIRS 为 <strong>[os.path.join(BASE_DIR, &rsquo;templates&rsquo;)]</strong> ，如下所示:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="n">TEMPLATES</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;BACKEND&#39;</span><span class="p">:</span> <span class="s1">&#39;django.template.backends.django.DjangoTemplates&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;DIRS&#39;</span><span class="p">:</span> <span class="p">[</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s1">&#39;templates&#39;</span><span class="p">)],</span>       <span class="c1"># 修改位置</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;APP_DIRS&#39;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;OPTIONS&#39;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;context_processors&#39;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;django.template.context_processors.debug&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;django.template.context_processors.request&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;django.contrib.auth.context_processors.auth&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;django.contrib.messages.context_processors.messages&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span></code></pre></div><p>修改 <code>index.py</code>，增加一个新的对象，用于向模板提交数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">context</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="n">context</span><span class="p">[</span><span class="s1">&#39;hello&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Hello World!&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
</span></span></code></pre></div><p>修改路由文件<code>urls.py</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">url</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">index</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;index/&#39;</span><span class="p">,</span> <span class="n">index</span><span class="o">.</span><span class="n">index</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>可以看到，这里使用 render 来替代之前使用的 HttpResponse。render 还使用了一个字典 context 作为参数。</p>
<p>context 字典中元素的键值 <strong>hello</strong> 对应了模板中的变量 <strong><code>{{ hello }}</code></strong> 。</p>
<p>再次访问 <strong>http://127.0.0.1:8080/index</strong>，可以看到页面：</p>
<p><img loading="lazy" src="https://i.loli.net/2021/11/15/ahzqjR5vDFElJAb.png" alt="index"  />
这样我们就完成了使用模板来输出数据，从而实现数据与视图分离。</p>
<p>接下来我们将具体介绍模板中常用的语法规则。</p>
<h2 id="django-模板标签">Django 模板标签</h2>
<h3 id="变量">变量</h3>
<p>模板语法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-django" data-lang="django"><span class="line"><span class="cl"><span class="x">view：｛&#34;HTML变量名&#34; : &#34;views变量名&#34;｝
</span></span></span><span class="line"><span class="cl"><span class="x">HTML：｛｛变量名｝｝
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Django学习笔记（二）</title>
      <link>https://laoooo.cn/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</link>
      <pubDate>Sun, 14 Nov 2021 10:40:14 +0000</pubDate>
      
      <guid>https://laoooo.cn/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid>
      <description>Django笔记（二） 视图与URL配置 在项目根目录下的同名文件夹里新建一个index.py，并输入代码： from django.http import HttpResponse def hello(request): return HttpResponse(&amp;#34;Hello world ! &amp;#34;) 接下来，绑定路</description>
      <content:encoded><![CDATA[<h1 id="django笔记二">Django笔记（二）</h1>
<h2 id="视图与url配置">视图与URL配置</h2>
<p>在项目根目录下的同名文件夹里新建一个<code>index.py</code>，并输入代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s2">&#34;Hello world ! &#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>接下来，绑定路由与视图函数。打开我们的<code>urls.py</code>删除原来的内容，写入以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">url</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">index</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^$&#39;</span><span class="p">,</span> <span class="n">index</span><span class="o">.</span><span class="n">hello</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>完整项目列表应如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">doodlexu@MacBook Web % tree
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── Web
</span></span><span class="line"><span class="cl">│   ├── __init__.py
</span></span><span class="line"><span class="cl">│   ├── asgi.py
</span></span><span class="line"><span class="cl">│   ├── index.py
</span></span><span class="line"><span class="cl">│   ├── settings.py
</span></span><span class="line"><span class="cl">│   ├── urls.py
</span></span><span class="line"><span class="cl">│   └── wsgi.py
</span></span><span class="line"><span class="cl">└── manage.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">1</span> directory, <span class="m">7</span> files
</span></span></code></pre></div><p>启动开发服务器后，访问应能看到如下页面：</p>
<p><img loading="lazy" src="https://i.loli.net/2021/11/14/8yLqmWiouMYcK2F.png" alt="Hello World！"  />
</p>
<p>***注意：*<em>项目中如果代码有改动，服务器会自动监测代码的改动并自动重新载入，所以如果你已经启动了服务器则不需手动重启。</em></p>
<h2 id="path-函数">path() 函数</h2>
<p>Django path() 可以接收四个参数，分别是两个必选参数：route、view 和两个可选参数：kwargs、name。</p>
<p>语法格式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="n">route</span><span class="p">,</span> <span class="n">view</span><span class="p">,</span> <span class="n">kwargs</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>
</span></span></code></pre></div><ul>
<li>route: 字符串，表示 URL 规则，与之匹配的 URL 会执行对应的第二个参数 view。</li>
<li>view: 用于执行与正则表达式匹配的 URL 请求。</li>
<li>kwargs: 视图使用的字典类型的参数。</li>
<li>name: 用来反向获取 URL。</li>
</ul>
<p>Django2. 0中可以使用 re_path() 方法来兼容 1.x 版本中的 <strong>url()</strong> 方法，一些正则表达式的规则也可以通过 re_path() 来实现 。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">include</span><span class="p">,</span> <span class="n">re_path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="n">re_path</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^index/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;index&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">re_path</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^bio/(?P&lt;username&gt;\w+)/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">bio</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;bio&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">re_path</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^weblog/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s1">&#39;blog.urls&#39;</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Django学习笔记（一）</title>
      <link>https://laoooo.cn/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
      <pubDate>Sun, 14 Nov 2021 00:13:46 +0000</pubDate>
      
      <guid>https://laoooo.cn/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
      <description>Django笔记（一） 创建项目 管理工具 在安装完Django之后，框架会为我们自带一个管理工具django-admin，我们可以在终端上直接输</description>
      <content:encoded><![CDATA[<h1 id="django笔记一">Django笔记（一）</h1>
<h2 id="创建项目">创建项目</h2>
<h3 id="管理工具">管理工具</h3>
<p>在安装完Django之后，框架会为我们自带一个管理工具<code>django-admin</code>，我们可以在终端上直接输入该命令以查看介绍：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">doodlexu@MacBook ~ % django-admin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Type <span class="s1">&#39;django-admin help &lt;subcommand&gt;&#39;</span> <span class="k">for</span> <span class="nb">help</span> on a specific subcommand.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Available subcommands:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>django<span class="o">]</span>
</span></span><span class="line"><span class="cl">    check
</span></span><span class="line"><span class="cl">    compilemessages
</span></span><span class="line"><span class="cl">    createcachetable
</span></span><span class="line"><span class="cl">    dbshell
</span></span><span class="line"><span class="cl">    diffsettings
</span></span><span class="line"><span class="cl">    dumpdata
</span></span><span class="line"><span class="cl">    flush
</span></span><span class="line"><span class="cl">    inspectdb
</span></span><span class="line"><span class="cl">    loaddata
</span></span><span class="line"><span class="cl">    makemessages
</span></span><span class="line"><span class="cl">    makemigrations
</span></span><span class="line"><span class="cl">    migrate
</span></span><span class="line"><span class="cl">    runserver
</span></span><span class="line"><span class="cl">    sendtestemail
</span></span><span class="line"><span class="cl">    shell
</span></span><span class="line"><span class="cl">    showmigrations
</span></span><span class="line"><span class="cl">    sqlflush
</span></span><span class="line"><span class="cl">    sqlmigrate
</span></span><span class="line"><span class="cl">    sqlsequencereset
</span></span><span class="line"><span class="cl">    squashmigrations
</span></span><span class="line"><span class="cl">    startapp
</span></span><span class="line"><span class="cl">    startproject
</span></span><span class="line"><span class="cl">    <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    testserver
</span></span></code></pre></div><h3 id="创建项目-1">创建项目</h3>
<p>创建项目可以用<code>django-admin</code>的<code>startproject</code>来创建所需的项目，具体格式为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">django-admin startproject 项目名称
</span></span></code></pre></div><p>一个全新的项目目录结构如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">doodlexu@MacBook Desk
</span></span><span class="line"><span class="cl">doodlexu@MacBook Web % tree
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── Web
</span></span><span class="line"><span class="cl">│   ├── __init__.py
</span></span><span class="line"><span class="cl">│   ├── asgi.py
</span></span><span class="line"><span class="cl">│   ├── settings.py
</span></span><span class="line"><span class="cl">│   ├── urls.py
</span></span><span class="line"><span class="cl">│   └── wsgi.py
</span></span><span class="line"><span class="cl">└── manage.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">1</span> directory, <span class="m">6</span> files
</span></span></code></pre></div><p>目录说明：</p>
<ul>
<li><strong>HelloWorld:</strong> 项目的容器。</li>
<li><strong>manage.py:</strong> 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。</li>
<li><strong>HelloWorld/<strong>init</strong>.py:</strong> 一个空文件，告诉 Python 该目录是一个 Python 包。</li>
<li><strong>HelloWorld/asgi.py:</strong> 一个 ASGI 兼容的 Web 服务器的入口，以便运行你的项目。</li>
<li><strong>HelloWorld/settings.py:</strong> 该 Django 项目的设置/配置。</li>
<li><strong>HelloWorld/urls.py:</strong> 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站&quot;目录&quot;。</li>
<li><strong>HelloWorld/wsgi.py:</strong> 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。</li>
</ul>
<h3 id="启动项目">启动项目</h3>
<p>我们可以通过运行<code>manage.py</code>这个文件来启动服务器，命令如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 manage.py runserver 127.0.0.1:8080
</span></span></code></pre></div><p>在浏览器输入IP，就可以看到默认页面：</p>
<p><img loading="lazy" src="https://i.loli.net/2021/11/14/9kZbwyTdFNEC2P5.png" alt="Django默认页面"  />
</p>
<p><em>不过值得注意的是，这里我们指定了运行的端口为8080，我们也可以不指定，那么其将会使用默认端口<code>8000</code></em></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
