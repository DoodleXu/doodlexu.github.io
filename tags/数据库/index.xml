<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>数据库 on Lao&#39;s Blog</title>
    <link>https://laoooo.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on Lao&#39;s Blog</description>
    <image>
      <url>https://laoooo.cn/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://laoooo.cn/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 17 Nov 2021 10:00:56 +0000</lastBuildDate><atom:link href="https://laoooo.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Django学习笔记（四）</title>
      <link>https://laoooo.cn/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</link>
      <pubDate>Wed, 17 Nov 2021 10:00:56 +0000</pubDate>
      
      <guid>https://laoooo.cn/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</guid>
      <description>Django 数据模型 Django 对各种数据库提供了很好的支持，包括：PostgreSQL、MySQL、SQLite、Oracle。 Django 为这些数据库提供了统一的调用</description>
      <content:encoded><![CDATA[<h1 id="django-数据模型">Django 数据模型</h1>
<blockquote>
<p>Django 对各种数据库提供了很好的支持，包括：PostgreSQL、MySQL、SQLite、Oracle。
Django 为这些数据库提供了统一的调用API。 我们可以根据自己业务需求选择不同的数据库。
MySQL 是 Web 应用中最常用的数据库。本文以MySQL为例，用Django来链接MySQL数据库。</p>
</blockquote>
<h2 id="驱动">驱动</h2>
<p>python默认不支持对MySQL进行直接操作，我们需要安装一个驱动以获得对MySQL的支持。如果你没有，你可以通过以下命令安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo pip3 install pymysql
</span></span></code></pre></div><h2 id="配置数据库">配置数据库</h2>
<p>Django可以对表进行管理，但还不能进行库级别的操作，所以我们需要手动建库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">create database 数据库名称 default <span class="nv">charset</span><span class="o">=</span>utf8<span class="p">;</span> <span class="c1"># 防止编码问题，指定为 utf8</span>
</span></span></code></pre></div><p>数据库有了，我们需要在Django配置（项目根目录/同名文件夹/settings.py）里写入相关信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;default&#39;</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">    <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;ENGINE&#39;</span><span class="p">:</span> <span class="s1">&#39;django.db.backends.mysql&#39;</span><span class="p">,</span>    <span class="c1"># 数据库引擎</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;NAME&#39;</span><span class="p">:</span> <span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="c1"># 数据库名称</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;HOST&#39;</span><span class="p">:</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="c1"># 数据库地址，本机 ip 地址 127.0.0.1 </span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;PORT&#39;</span><span class="p">:</span> <span class="mi">3306</span><span class="p">,</span> <span class="c1"># 端口 </span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;USER&#39;</span><span class="p">:</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span>  <span class="c1"># 数据库用户名</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;PASSWORD&#39;</span><span class="p">:</span> <span class="s1">&#39;123456&#39;</span><span class="p">,</span> <span class="c1"># 数据库密码</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><em>注意：如果你使用了 Python2.x 版本这里添加了中文注释，所以你需要在 settings.py 文件头部添加 <strong><code># -*- coding: UTF-8 -*-</code></strong> 。</em></p>
<h2 id="定义模型">定义模型</h2>
<h3 id="创建app">创建APP</h3>
<p>Django 规定，如果要使用模型，必须要创建一个 app。我们使用以下命令创建一个 TestModel 的 app:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">django-admin startapp TestModel
</span></span></code></pre></div><p>目录结构如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Web
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- Web
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- manage.py
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl"><span class="p">|</span>-- TestModel
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="p">|</span>-- __init__.py
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="p">|</span>-- admin.py
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="p">|</span>-- models.py
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="p">|</span>-- tests.py
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="sb">`</span>-- views.py
</span></span></code></pre></div><p>修改 TestModel/models.py 文件，代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># models.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Test</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span></span></code></pre></div><p>以上的类名代表了数据库<strong>表名</strong>，且继承了models.Model，类里面的字段代表数据表中的 <strong>字段(name)</strong> ，数据类型则由CharField（相当于varchar）、DateField（相当于datetime）， max_length 参数限定长度。
接下来在 settings.py 中找到INSTALLED_APPS这一项，如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;django.contrib.admin&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;django.contrib.auth&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;django.contrib.contenttypes&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;django.contrib.sessions&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;django.contrib.messages&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;django.contrib.staticfiles&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;TestModel&#39;</span><span class="p">,</span>               <span class="c1"># 添加此项</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>在命令行中运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 manage.py migrate   <span class="c1"># 创建表结构</span>
</span></span><span class="line"><span class="cl">python3 manage.py makemigrations TestModel  <span class="c1"># 让 Django 知道我们在我们的模型有一些变更</span>
</span></span><span class="line"><span class="cl">python3 manage.py migrate TestModel   <span class="c1"># 创建表结构</span>
</span></span></code></pre></div><p>如果看到&quot;Creating table…&quot; 的字样，说明你的数据表就创建好了。
表名组成结构为：应用名_类名（如：TestModel_test）。
**注意：**尽管我们没有在 models 给表设置主键，但是 Django 会自动添加一个 id 作为主键。</p>
<h2 id="数据库操作">数据库操作</h2>
<p>我们可以写一个testdb.py来测试，并修改urls.py：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span><span class="p">,</span><span class="n">testdb</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span><span class="p">(</span><span class="s1">&#39;index/&#39;</span><span class="p">,</span> <span class="n">index</span><span class="o">.</span><span class="n">index</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span><span class="p">(</span><span class="s1">&#39;testdb/&#39;</span><span class="p">,</span> <span class="n">testdb</span><span class="o">.</span><span class="n">testdb</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><h3 id="添加数据">添加数据</h3>
<p>添加数据需要先创建对象，然后再执行 save 函数，相当于SQL中的INSERT：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span> 
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">TestModel.models</span> <span class="kn">import</span> <span class="n">Test</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 数据库操作</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">testdb</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">Test</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;runoob&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s2">&#34;&lt;p&gt;数据添加成功！&lt;/p&gt;&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>如果访问 <strong>http://127.0.0.1:8000/testdb</strong> 就可以看到数据添加成功的提示。</p>
<h3 id="获取数据">获取数据</h3>
<p>Django提供了多种方式来获取数据库的内容，这里就不细讲了，如下面代码所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">TestModel.models</span> <span class="kn">import</span> <span class="n">Test</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 数据库操作</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">testdb</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 初始化</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">response1</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 通过objects这个模型管理器的all()获得所有数据行，相当于SQL中的SELECT * FROM</span>
</span></span><span class="line"><span class="cl">    <span class="nb">list</span> <span class="o">=</span> <span class="n">Test</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="c1"># filter相当于SQL中的WHERE，可设置条件过滤结果</span>
</span></span><span class="line"><span class="cl">    <span class="n">response2</span> <span class="o">=</span> <span class="n">Test</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 获取单个对象</span>
</span></span><span class="line"><span class="cl">    <span class="n">response3</span> <span class="o">=</span> <span class="n">Test</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 限制返回的数据 相当于 SQL 中的 OFFSET 0 LIMIT 2;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Test</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">#数据排序</span>
</span></span><span class="line"><span class="cl">    <span class="n">Test</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 上面的方法可以连锁使用</span>
</span></span><span class="line"><span class="cl">    <span class="n">Test</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;admin&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 输出所有数据</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">response1</span> <span class="o">+=</span> <span class="n">var</span><span class="o">.</span><span class="n">name</span> <span class="o">+</span> <span class="s2">&#34; &#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">response1</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s2">&#34;&lt;p&gt;&#34;</span> <span class="o">+</span> <span class="n">response</span> <span class="o">+</span> <span class="s2">&#34;&lt;/p&gt;&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="更新数据">更新数据</h3>
<p>修改数据可以使用 save() 或 update():</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">TestModel.models</span> <span class="kn">import</span> <span class="n">Test</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 数据库操作</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">testdb</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 修改其中一个id=1的name字段，再save，相当于SQL中的UPDATE</span>
</span></span><span class="line"><span class="cl">    <span class="n">test1</span> <span class="o">=</span> <span class="n">Test</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">test1</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Google&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">test1</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 另外一种方式</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#Test.objects.filter(id=1).update(name=&#39;Google&#39;)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 修改所有的列</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Test.objects.all().update(name=&#39;Google&#39;)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s2">&#34;&lt;p&gt;修改成功&lt;/p&gt;&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="删除数据">删除数据</h3>
<p>删除数据库中的对象只需调用该对象的delete()方法即可：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">TestModel.models</span> <span class="kn">import</span> <span class="n">Test</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 数据库操作</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">testdb</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 删除id=1的数据</span>
</span></span><span class="line"><span class="cl">    <span class="n">test1</span> <span class="o">=</span> <span class="n">Test</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">test1</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 另外一种方式</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Test.objects.filter(id=1).delete()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 删除所有数据</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Test.objects.all().delete()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s2">&#34;&lt;p&gt;删除成功&lt;/p&gt;&#34;</span><span class="p">)</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
